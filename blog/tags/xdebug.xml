<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[zf2timo dev notes]]></title>
    <link href="/blog/tags/xdebug.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-12-14T14:59:57+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Empty server name in XDEBUG]]></title>
            <link href="/blog/2017/12/14/empty-server-name-in-xdebug"/>
            <updated>2017-12-14T00:00:00+01:00</updated>
            <id>/blog/2017/12/14/empty-server-name-in-xdebug</id>
            <content type="html"><![CDATA[<h1 id="empty-server-name-in-xdebug">Empty server name in XDEBUG</h1>

<p>Today I build a new docker environment for a project with a really simple setup. All I needed
was a php and nginx container. 
I had both created for other projects several times without big issues.
But as I started to debug the application, PHPStorm wasn't able to map the remote directory to a local directory.
For the first debug session this is normal and you have to configure this manually.</p>

<p>But this time I had another message in my debug window:</p>

<p><img src="/images/posts/2017-12-14-debug-error-window.png" alt="PHPStorm debug window with error" title="PHPStorm Debug window" /></p>

<p>While checking my PHPStorm configuration I noticed a Server without a name in the "Run\Debug configurations > Servers" window.
I did not created a config like this one.</p>

<p>After some research on the internet I finally found the solution:
My NGINX did not send a Server name in the response. For this reason my IDE was not able to create a proper configuration and 
map the local directories to remote directories.</p>

<p>To Fix the problem only a single line was missing in my <code>/etc/nginx/sites-available/default.conf</code></p>

<pre><code class="nginx">fastcgi_param SERVER_NAME $server_name;
</code></pre>

<p>With this configuration the debugging works smooth as usually.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP xdebug in docker container]]></title>
            <link href="/blog/2016/09/23/php-xdebug-in-docker-container"/>
            <updated>2016-09-23T00:00:00+02:00</updated>
            <id>/blog/2016/09/23/php-xdebug-in-docker-container</id>
            <content type="html"><![CDATA[<p>When you are using Docker as a development environment, you face the situation to debug your php code with xdebug soon
or later.
All yo need to do, is to change your <code>Dockerfile</code> of your php container like this:</p>

<pre><code class="dockerfile">FROM php:7.0-fpm

RUN docker-php-ext-install pdo_mysql \
    &amp;&amp; docker-php-ext-install json

RUN pecl install xdebug
RUN docker-php-ext-enable xdebug
RUN sed -i '1 a xdebug.remote_autostart=true' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
RUN sed -i '1 a xdebug.remote_mode=req' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
RUN sed -i '1 a xdebug.remote_handler=dbgp' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
RUN sed -i '1 a xdebug.remote_connect_back=1 ' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
RUN sed -i '1 a xdebug.remote_port=9000' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
RUN sed -i '1 a xdebug.remote_host=192.168.0.196' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
RUN sed -i '1 a xdebug.remote_enable=1' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
</code></pre>

<p>If your container was already running, you have to stop it and start it again</p>

<pre><code class="bash">$ for id in $(sudo docker ps | grep -v CONTAINER | awk '{print $1}') ; do sudo docker stop $id ; done
$ sudo docker-compose up -d
</code></pre>

<p>And that's it.</p>
]]></content>
        </entry>
    </feed>